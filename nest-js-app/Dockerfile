ARG base_image=node:current-alpine3.19

# --- stage 1 ---
FROM $base_image as builder

#ENV NODE_VERSION 18.19.0

# Set the working directory
WORKDIR /app

# Copy only the package.json and package-lock.json to leverage Docker cache
COPY package*.json ./

# Install dependencies (excluding typescript files), 
# ci = clean install - install deps exactly as in "package-lock.json"
# workaround if there is no such dep in the image
RUN npm ci --production && npm install rimraf --save-dev && npm cache clean --force


# Copy source files (excluding files generated by the application)
COPY . .

# Build the Nest.js application
RUN npm run build

# --- stage 2 ---
# -----> Start a NEW stage with a smaller base image
FROM $base_image
# Set the working directory
WORKDIR /app
# Copy only the necessary files from the previous stage
# COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/dist ./dist

# Expose the port the app runs on
EXPOSE 4000

# Command to run app
# CMD ["npm", "run", "start:prod"]
CMD ["node", "dist/main"]